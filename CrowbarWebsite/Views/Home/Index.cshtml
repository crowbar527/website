@using CrowbarWebsite.Services;
@using Microsoft.AspNetCore.Identity;
@using AspNetCore.Identity.DynamoDB;
@using CrowbarWebsite.Helpers;
@inject SignInManager<DynamoIdentityUser> SignInManager
@inject UserManager<DynamoIdentityUser> UserManager
@{
    ViewData["Title"] = "CROWBAR";
}

<head>
    <!--Include Leaflet-->
    <link rel="stylesheet" href="~/lib/Leaflet/leaflet.css" />
    <script src="~/lib/Leaflet/leaflet.js"></script>
    <script src="~/js/interactive.js"></script>

</head>

<body id="contentroot">
    @{var authed = SignInManager.IsSignedIn(User); }
    @if (!authed)
    {
        <div id="indexBANNER_giveusyourcookies">
            Login or Register to access all site features!
        </div>
    }
    else
    {
        <div id="indexdock_sidebar">
            <H5 class="CROWBARUI_SectionHeader">
                Filter Elements
            </H5>
            <div class="CROWBARUI_SectionContainer">
                <span>
                    @(Html.CheckBox("CID_interactive_scams", true, new { @onclick = "INTERACTIVE.FN_TOGGLE_SCAMS()" })) Show Static Cameras
                </span>
                <span>
                    @(Html.CheckBox("CID_interactive_rcams", true, new { @onclick = "INTERACTIVE.FN_TOGGLE_RCAMS()" })) Show Traffic Cameras
                </span>
            </div>
        </div>
    }
    <div id="@(authed ? "indexdock_map" : "mapcontainer")">
        <div id="ljsmap" style="width:100%;height:800px;">

        </div>
        <span id="lastupdateddiv">
            @($"Last Updated: { CacheService.LastUpdated.ToLocalTime().ToString("HH:mm")} UTC")
        </span>
    </div>



</body>


<script>
    INTERACTIVE.FN_INITIALISE();
    @foreach (var item in CacheService.Cameras)
    {
       // @if (SignInManager.IsSignedIn(User))
       // {
            <text>
                marker = L.marker([@item.StartPos.Latitude, @item.StartPos.Longtitude], {
            icon: @(item.Type.Equals("STATIC") ? "INTERACTIVE.ICONS['icon_staticcamera']" : "INTERACTIVE.ICONS['icon_redlight']")
                });
               </text>
            @using (var dmgh = new DisposableMapGenHelper(item, 0.001))
            {
                <text>
                    marker.bindPopup('@item.Street ' + '\nNumber of crashes:' + '@(dmgh.CameraPoints.Count)');
                    @if (item.Type.Equals("STATIC")) {
                            <text>
                                INTERACTIVE.MARKERS_SCAMS.push(marker);
                            </text>
                        }
                        else{
                            <text>
                                INTERACTIVE.MARKERS_RCAMS.push(marker);
                            </text>
                    }
                
                </text>
                /*
                    @foreach (var cam in dmgh.CameraPoints)
                    {
                    <text>
                        L.circle([@cam.Y,@cam.X], {
                        color: 'blue',
                        radius: 5,
                        fillcolor: 'blue',
                        fillopacity: 0.5,
                        units: 'meters',
                        })

                    </text>
                    }*/
                }

            //Add Area
            /*<text>
                L.circle([@item.StartPos.Latitude,@item.StartPos.Longtitude],{
                color: 'red',
                radius: @(CacheService.CASRadiusInMeters),
                fillcolor: '#f03',
                fillopacity: 0.5,
                units: 'meters',
                }).addTo(mymap);
            </text>*/
       /* }
        else
        {
            //Add Marker
            <text>
                marker = L.marker([@item.StartPos.Latitude, @item.StartPos.Longtitude], {
                icon: @(item.Type.Equals("STATIC") ? "icon_staticcamera" : "icon_redlight")
                });
                marker.bindPopup('Log in to see crash data!');
                marker.addTo(mymap);
            </text>
        }*/
    }
</script>
