@using CrowbarWebsite.Services;
@using Microsoft.AspNetCore.Identity
@using CrowbarWebsite.Helpers;
@using AspNetCore.Identity.DynamoDB
@inject SignInManager<DynamoIdentityUser> SignInManager
@inject UserManager<DynamoIdentityUser> UserManager

<head>
    <script src="https://maps.googleapis.com/maps/api/js?"></script>
    <!--Include Leaflet-->
    <link rel="stylesheet" href="~/lib/Leaflet/leaflet.css" />
    <script src="~/lib/Leaflet/leaflet.js"></script>

</head>
<div id="ljsmap" style="width:100%;height:800px;">

</div>
<span id="lastupdateddiv">
    @($"Last Updated: { CacheService.LastUpdated.ToLocalTime().ToString("HH:mm")} UTC")
</span>

<!--Setup map-->
<script>
    var mymap = L.map('ljsmap').setView([-41.2177074, 178.1841412], 5.96);
    L.tileLayer('https://a.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '<a href="https://www.openstreetmap.org/copyright">© OpenStreetMap contributors</a>',
        maxZoom: 18,
        tileSize: 512,
        zoomOffset: -1
    }).addTo(mymap);
    //Create Icons
    var icon_redlight = L.icon({
        iconUrl: './lib/art/camera-redlight.png',
        iconSize: [26, 26],
        iconAnchor: [13.5, 26],
        popupAnchor: [0, -26]
    });
    var icon_staticcamera = L.icon({
        iconUrl: './lib/art/camera-static.png',
        iconSize: [26, 26],
        iconAnchor: [13.5, 26],
        popupAnchor: [0, -26]
    });
</script>

<script>
    
    @{UserPref up = UserPref.GenerateFromSESSION(Context.Session); }
    @foreach (var item in CacheService.Cameras)
    {
        @if (SignInManager.IsSignedIn(User))
        {
            @if (((!up.CFG__SHOW_SCAMS && item.Type.Equals("STATIC")) || (!up.CFG__SHOW_RCAMS && !item.Type.Equals("STATIC"))))
                    continue;
                //Add Marker
            <text>
                marker = L.marker([@item.StartPos.Latitude, @item.StartPos.Longtitude], {
            icon: @(item.Type.Equals("STATIC") ? "icon_staticcamera" : "icon_redlight")
                });
            </text>
            using (var dmgh = new DisposableMapGenHelper(item, 0.001))
            {
                <text>
                    marker.bindPopup('@item.Street ' + '\nNumber of crashes:' + '@(dmgh.CameraPoints.Count)');
                    marker.addTo(mymap);
                </text>
                    foreach (var cam in dmgh.CameraPoints)
                    {
                    <text>
                        L.circle([@cam.Y,@cam.X], {
                        color: 'blue',
                        radius: 5,
                        fillcolor: 'blue',
                        fillopacity: 0.5,
                        units: 'meters',
                        }).addTo(mymap);
                    </text>
                    }
            }

            //Add Area
            <text>
                L.circle([@item.StartPos.Latitude,@item.StartPos.Longtitude],{
                color: 'red',
                radius: @(CacheService.CASRadiusInMeters),
                fillcolor: '#f03',
                fillopacity: 0.5,
                units: 'meters',
                }).addTo(mymap);
            </text>
        }
        else
        {
            //Add Marker
            <text>
                marker = L.marker([@item.StartPos.Latitude, @item.StartPos.Longtitude], {
                icon: @(item.Type.Equals("STATIC") ? "icon_staticcamera" : "icon_redlight")
                });
                marker.bindPopup('Log in to see crash data!');
                marker.addTo(mymap);
            </text>
        }
    }
</script>

